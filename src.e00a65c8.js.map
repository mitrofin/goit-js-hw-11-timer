{"version":3,"sources":["index.js"],"names":["CountdownTimer","selector","targetDate","refs","$days","document","querySelector","$hours","$mins","$secs","$timer","setInterval","currentTime","Date","now","targetTime","updateTimer","getTimeComponets","days","hours","mins","secs","innerHTML","pad","value","String","padStart","time","Math","floor","finalTime","console","log","renderTimer"],"mappings":";;;AA4DA,aAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EA5DA,QAAA,oBAIMA,IAAAA,EAAAA,WACkC,SAAA,EAAA,GAAxBC,IAAAA,EAAAA,EAAAA,SAAUC,EAAAA,EAAAA,WAAc,EAAA,KAAA,GAC/BD,KAAAA,SAAWA,EACXC,KAAAA,WAAaA,EACbC,KAAAA,KAAO,CACVC,MAAOC,SAASC,cAAiBL,GAAAA,OAAAA,EADvB,yBAEVM,OAAQF,SAASC,cAAiBL,GAAAA,OAAAA,EAFxB,0BAGVO,MAAOH,SAASC,cAAiBL,GAAAA,OAAAA,EAHvB,yBAIVQ,MAAOJ,SAASC,cAAiBL,GAAAA,OAAAA,EAJvB,yBAKVS,OAAQL,SAASC,cAAiBL,GAAAA,OAAAA,EAA1B,eA+Cd,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,cA3CgB,MAAA,WAAA,IAAA,EAAA,KAOVU,YAAY,WACJC,IAAAA,EAAcC,KAAKC,MACnBC,EAAa,EAAKb,WAAaU,EACrC,EAAKI,YAAYC,EAAiBF,KACjC,OAgCT,CAAA,IAAA,cA7B2C,MAAA,SAAA,GAA3BG,IAAAA,EAAAA,EAAAA,KAAMC,EAAAA,EAAAA,MAAOC,EAAAA,EAAAA,KAAMC,EAAAA,EAAAA,KAC1BlB,KAAAA,KAAKC,MAAMkB,UAAYJ,EAC1B,KAAKf,KAAKI,OAAOe,UAAYH,EAC7B,KAAKhB,KAAKK,MAAMc,UAAYF,EAC5B,KAAKjB,KAAKM,MAAMa,UAAYD,MAyBlC,EAxDMrB,GAsCN,SAASuB,EAAIC,GACJC,OAAAA,OAAOD,GAAOE,SAAS,EAAG,KAGnC,SAAST,EAAiBU,GAKjB,MAAA,CAAET,KAJIK,EAAIK,KAAKC,MAAMF,EAAQ,QAIrBR,MAHDI,EAAIK,KAAKC,MAAOF,EAAQ,MAAyB,OAGzCP,KAFTG,EAAIK,KAAKC,MAAOF,EAAQ,KAAoB,MAE7BN,KADfE,EAAIK,KAAKC,MAAOF,EAAQ,IAAc,OAKrD,IAAMG,EAAY,IAAI9B,EAAe,CACjCC,SAAU,WACVC,WAAY,IAAIW,KAAK,iBAEzBkB,QAAQC,IAAIF,GACZA,EAAUG","file":"src.e00a65c8.js","sourceRoot":"..\\src","sourcesContent":["import \"./css/styles.css\";\n\n\n\nclass CountdownTimer {\n  constructor({ selector, targetDate }) {\n    this.selector = selector;\n    this.targetDate = targetDate;\n    this.refs = {\n      $days: document.querySelector(`${selector} [data-value=\"days\"]`),\n      $hours: document.querySelector(`${selector} [data-value=\"hours\"]`),\n      $mins: document.querySelector(`${selector} [data-value=\"mins\"]`),\n      $secs: document.querySelector(`${selector} [data-value=\"secs\"]`),\n      $timer: document.querySelector(`${selector} #timer-1`),\n    };\n  }\n\n  renderTimer() {\n    /* start() {\n      const finalTime = new CountdownTimer({\n      selector: '#timer-1',\n      targetDate: new Date('Jan 1, 2021'),\n      }); */\n\n      setInterval(() => {\n        const currentTime = Date.now();\n        const targetTime = this.targetDate - currentTime;\n        this.updateTimer(getTimeComponets(targetTime));\n      }, 1000);\n  }\n\n  updateTimer({ days, hours, mins, secs }) {\n    this.refs.$days.innerHTML = days,\n      this.refs.$hours.innerHTML = hours,\n      this.refs.$mins.innerHTML = mins,\n      this.refs.$secs.innerHTML = secs;\n    \n  }\n  \n\n}\n\nfunction pad(value) { \n  return String(value).padStart(2, '0');\n}\n\nfunction getTimeComponets(time) {\n  const days = pad(Math.floor(time / (1000 * 60 * 60 * 24)));\n  const hours = pad(Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\n  const mins = pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n  const secs = pad(Math.floor((time % (1000 * 60)) / 1000));\n  return { days, hours, mins, secs };\n}\n\n\nconst finalTime = new CountdownTimer({\n    selector: '#timer-1',\n    targetDate: new Date('Jan 1, 2021'),\n});\nconsole.log(finalTime);\nfinalTime.renderTimer();"]}